{"ast":null,"code":"var _jsxFileName = \"/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n\nimport axios from \"axios\";\nexport default function Form() {\n  // can declare initialState once and use as initial state for form, for errors, and reset form\n  const initialFormState = {\n    name: \"\",\n    email: \"\",\n    motivation: \"\",\n    positions: \"\",\n    terms: \"\"\n  }; // temporary state used to set state\n\n  const [post, setPost] = useState([]); // server error\n\n  const [serverError, setServerError] = useState(\"\"); // managing state for our form inputs\n\n  const [formState, setFormState] = useState(initialFormState); // control whether or not the form can be submitted if there are errors in form validation\n\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true); // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n\n  const [errors, setErrors] = useState(initialFormState); // schema used for all validation to determine whether the input is valid or not\n\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"Name is a required field\"),\n    email: yup.string().email(\"must be a valid email address\").required(),\n    terms: yup.boolean().oneOf([true], \"please agree with us\"),\n    positions: yup.string().required(\"Must choose a position\"),\n    motivation: yup.string().required(\"must say why\")\n  }); // inline validation, validating one key/value pair\n\n  const validateChange = e => {\n    yup.reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n    .validate(e.target.value) // value in input\n    .then(valid => {\n      // if passing validation, clear any error\n      setErrors({ ...errors,\n        [e.target.name]: \"\"\n      });\n    }).catch(err => {\n      // if failing validation, set error in state\n      console.log(\"error!\", err);\n      setErrors({ ...errors,\n        [e.target.name]: err.errors[0]\n      });\n    });\n  }; // whenever state updates, validate the entire form. if valid, then change button to be enabled.\n\n\n  useEffect(() => {\n    formSchema.isValid(formState).then(valid => {\n      console.log(\"valid?\", valid);\n      setIsButtonDisabled(!valid);\n    });\n  }, [formState]); // onSubmit function\n\n  const formSubmit = e => {\n    e.preventDefault(); // send out POST request with obj as second param, for us that is formState.\n\n    axios.post(\"https://reqres.in/api/users\", formState).then(response => {\n      // update temp state with value to display\n      setPost(response.data); // clear state, could also use 'initialState' here\n\n      setFormState({\n        name: \"\",\n        email: \"\",\n        motivation: \"\",\n        positions: \"\",\n        terms: \"\"\n      }); // clear any server error\n\n      setServerError(null);\n    }).catch(err => {\n      // this is where we could create a server error in the form!\n      setServerError(\"oops! something happened!\");\n    });\n  }; // onChange function\n\n\n  const inputChange = e => {\n    e.persist(); // necessary because we're passing the event asyncronously and we need it to exist even after this function completes (which will complete before validateChange finishes)\n\n    const newFormData = { ...formState,\n      [e.target.name]: e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n    }; // remember value of the checkbox is in \"checked\" and all else is \"value\"\n\n    validateChange(e); // for each change in input, do inline validation\n\n    setFormState(newFormData); // update state with new data\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, serverError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 22\n    }\n  }, serverError) : null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, \"Name\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    onChange: inputChange,\n    value: formState.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), errors.name.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 35\n    }\n  }, errors.name) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"email\",\n    onChange: inputChange,\n    value: formState.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), errors.email.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"motivation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"Why would you like to volunteer?\", /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"motivation\",\n    onChange: inputChange,\n    value: formState.motivation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }), errors.motivation.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, errors.motivation) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"positions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"What would you like to help with?\", /*#__PURE__*/React.createElement(\"select\", {\n    id: \"positions\",\n    name: \"positions\",\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"--Please choose an option--\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Newsletter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, \"Newsletter\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Yard Work\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"Yard Work\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Admin Work\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Admin\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Tabling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"Tabling\")), errors.positions.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, errors.positions) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"terms\",\n    className: \"terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"terms\",\n    checked: formState.terms,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }), \"Terms & Conditions\"), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, JSON.stringify(post, null, 2)), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isButtonDisabled,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n} // import React, { useState, useEffect } from 'react';\n// import * as yup from 'yup';\n// import axios from  'axios';\n// export default function Form() {\n//     const initialFormState = {\n//         username: '',\n//         email: '',\n//         password:  '',\n//         terms: ''\n//     };\n//     const [post, setPost] = useState([]);\n//     const [serverError, setServerError] = useState(\"\");\n//     const [formState, setFormState] = useState(initialFormState);\n//     const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n//     const [errors, setErrors] = useState(initialFormState);\n//     const formSchema = yup.object().shape({\n//         username: yup.string().required(\"You must choose a username!\"),\n//         email: yup.string().email('Invalid email address').required(),\n//         password: yup.string().required(\"Invalid password\"),\n//         terms: yup.boolean().oneOf([true], 'Agree or die')\n//     });\n//     const validateChange = e => {\n//         yup\n//             .reach(formSchema, e.target.name)\n//             .validate(e.target.value)\n//             .then(valid => {\n//                 setErrors({ ...errors, [e.target.name]: '' });\n//             })\n//             .catch(err => {\n//                 console.log('error', err);\n//                 setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//         });\n//     };\n//     useEffect(() => {\n//         formSchema.isValid(formState).then(valid => {\n//             console.log('valid?', valid);\n//             setIsButtonDisabled(!valid);\n//         });\n//     }, [formState]);\n//     const formSubmit = e => {\n//         e.preventDefault();\n//         axios\n//             .post('h', formState)\n//             .then(response => {\n//                 setPost(response.data);\n//                 setFormState({\n//                     username: '',\n//                     email: '',\n//                     password: '',\n//                     terms: ''\n//                 });\n//                 setServerError(null);\n//             })\n//             .catch(err => {\n//                 setServerError('Something isn\\'t working!');\n//             });\n//     };\n//     const inputChange = e => {\n//         e.persist();\n//         const newFormData = {\n//             ...formState,\n//             [e.target.name]:\n//                 e.target.type === 'checkbox'  ? e.target.checked : e.target.value\n//         };\n//         validateChange(e);\n//         setFormState(newFormData)\n//     }\n//     return(\n//         <form onSubmit={formSubmit}>\n//             {serverError ? <p className='error'>{serverError}</p> : null}\n//             <label htmlFor='username'>\n//                 Username: \n//                 <input\n//                 id='username'\n//                 type='text'\n//                 name='username'\n//                 placeholder='Username'\n//                 onChange={inputChange}\n//                 value={formState.username} />\n//                 {errors.username.length > 0 ? <p className='error'>{errors.name}</p> : null}\n//             </label>\n//             <label htmlFor='email'>\n//                 Email: \n//                 <input\n//                 id='email'\n//                 type='text'\n//                 name='email'\n//                 placeholder='Email'\n//                 onChange={inputChange}\n//                 value={formState.email} />\n//                 {errors.email.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label htmlFor='password'>\n//                 Password: \n//                 <input\n//                 type='text'\n//                 name='password'\n//                 placeholder='Password'\n//                 onChange={inputChange}\n//                 value={formState.password} />\n//                 {errors.password.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label id='terms' htmlFor='terms'>\n//                 <input\n//                 type='checkbox' \n//                 name='terms'\n//                 checked={formState.terms}\n//                 onChange={inputChange} />\n//                 Terms of Service\n//             </label>\n//             <pre>{JSON.stringify(post, null, 2)}</pre>\n//             <button id='submit' type='submit' disabled={isButtonDisabled}>Submit</button>\n//         </form>\n//     );\n// };","map":{"version":3,"sources":["/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js"],"names":["React","useState","useEffect","yup","axios","Form","initialFormState","name","email","motivation","positions","terms","post","setPost","serverError","setServerError","formState","setFormState","isButtonDisabled","setIsButtonDisabled","errors","setErrors","formSchema","object","shape","string","required","boolean","oneOf","validateChange","e","reach","target","validate","value","then","valid","catch","err","console","log","isValid","formSubmit","preventDefault","response","data","inputChange","persist","newFormData","type","checked","length","JSON","stringify"],"mappings":"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":["import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\nimport axios from \"axios\";\n\nexport default function Form() {\n  // can declare initialState once and use as initial state for form, for errors, and reset form\n  const initialFormState = {\n    name: \"\",\n    email: \"\",\n    motivation: \"\",\n    positions: \"\",\n    terms: \"\"\n  };\n\n  // temporary state used to set state\n  const [post, setPost] = useState([]);\n\n  // server error\n  const [serverError, setServerError] = useState(\"\");\n\n  // managing state for our form inputs\n  const [formState, setFormState] = useState(initialFormState);\n\n  // control whether or not the form can be submitted if there are errors in form validation\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n  // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n  const [errors, setErrors] = useState(initialFormState);\n\n  // schema used for all validation to determine whether the input is valid or not\n  const formSchema = yup.object().shape({\n    name: yup.string().required(\"Name is a required field\"),\n    email: yup\n      .string()\n      .email(\"must be a valid email address\")\n      .required(),\n    terms: yup.boolean().oneOf([true], \"please agree with us\"),\n    positions: yup.string().required(\"Must choose a position\"),\n    motivation: yup.string().required(\"must say why\")\n  });\n\n  // inline validation, validating one key/value pair\n  const validateChange = e => {\n    yup\n      .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n      .validate(e.target.value) // value in input\n      .then(valid => {\n        // if passing validation, clear any error\n        setErrors({ ...errors, [e.target.name]: \"\" });\n      })\n      .catch(err => {\n        // if failing validation, set error in state\n        console.log(\"error!\", err);\n        setErrors({ ...errors, [e.target.name]: err.errors[0] });\n      });\n  };\n\n  // whenever state updates, validate the entire form. if valid, then change button to be enabled.\n  useEffect(() => {\n    formSchema.isValid(formState).then(valid => {\n      console.log(\"valid?\", valid);\n      setIsButtonDisabled(!valid);\n    });\n  }, [formState]);\n\n  // onSubmit function\n  const formSubmit = e => {\n    e.preventDefault();\n\n    // send out POST request with obj as second param, for us that is formState.\n    axios\n      .post(\"https://reqres.in/api/users\", formState)\n      .then(response => {\n        // update temp state with value to display\n        setPost(response.data);\n\n        // clear state, could also use 'initialState' here\n        setFormState({\n          name: \"\",\n          email: \"\",\n          motivation: \"\",\n          positions: \"\",\n          terms: \"\"\n        });\n\n        // clear any server error\n        setServerError(null);\n      })\n      .catch(err => {\n        // this is where we could create a server error in the form!\n        setServerError(\"oops! something happened!\");\n      });\n  };\n\n  // onChange function\n  const inputChange = e => {\n    e.persist(); // necessary because we're passing the event asyncronously and we need it to exist even after this function completes (which will complete before validateChange finishes)\n    const newFormData = {\n      ...formState,\n      [e.target.name]:\n        e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n    }; // remember value of the checkbox is in \"checked\" and all else is \"value\"\n    validateChange(e); // for each change in input, do inline validation\n    setFormState(newFormData); // update state with new data\n  };\n\n  return (\n    <form onSubmit={formSubmit}>\n      {serverError ? <p className=\"error\">{serverError}</p> : null}\n      <label htmlFor=\"name\">\n        Name\n        <input\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          onChange={inputChange}\n          value={formState.name}\n        />\n        {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n      </label>\n      <label htmlFor=\"email\">\n        Email\n        <input\n          type=\"text\"\n          name=\"email\"\n          onChange={inputChange}\n          value={formState.email}\n        />\n        {errors.email.length > 0 ? (\n          <p className=\"error\">{errors.email}</p>\n        ) : null}\n      </label>\n      <label htmlFor=\"motivation\">\n        Why would you like to volunteer?\n        <textarea\n          name=\"motivation\"\n          onChange={inputChange}\n          value={formState.motivation}\n        />\n        {errors.motivation.length > 0 ? (\n          <p className=\"error\">{errors.motivation}</p>\n        ) : null}\n      </label>\n\n      <label htmlFor=\"positions\">\n        What would you like to help with?\n        <select id=\"positions\" name=\"positions\" onChange={inputChange}>\n          <option value=\"\">--Please choose an option--</option>\n          <option value=\"Newsletter\">Newsletter</option>\n          <option value=\"Yard Work\">Yard Work</option>\n\n          <option value=\"Admin Work\">Admin</option>\n\n          <option value=\"Tabling\">Tabling</option>\n        </select>\n        {errors.positions.length > 0 ? (\n          <p className=\"error\">{errors.positions}</p>\n        ) : null}\n      </label>\n\n      <label htmlFor=\"terms\" className=\"terms\">\n        <input\n          type=\"checkbox\"\n          name=\"terms\"\n          checked={formState.terms}\n          onChange={inputChange}\n        />\n        Terms & Conditions\n        {/* {errors.terms.length > 0 ? (\n          <p className=\"error\">{errors.terms}</p>\n        ) : null} */}\n      </label>\n      <pre>{JSON.stringify(post, null, 2)}</pre>\n      <button disabled={isButtonDisabled} type=\"submit\">\n        Submit\n      </button>\n    </form>\n  );\n}\n\n\n// import React, { useState, useEffect } from 'react';\n// import * as yup from 'yup';\n// import axios from  'axios';\n\n\n// export default function Form() {\n\n//     const initialFormState = {\n//         username: '',\n//         email: '',\n//         password:  '',\n//         terms: ''\n//     };\n\n//     const [post, setPost] = useState([]);\n//     const [serverError, setServerError] = useState(\"\");\n//     const [formState, setFormState] = useState(initialFormState);\n//     const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n//     const [errors, setErrors] = useState(initialFormState);\n\n//     const formSchema = yup.object().shape({\n//         username: yup.string().required(\"You must choose a username!\"),\n//         email: yup.string().email('Invalid email address').required(),\n//         password: yup.string().required(\"Invalid password\"),\n//         terms: yup.boolean().oneOf([true], 'Agree or die')\n//     });\n\n//     const validateChange = e => {\n//         yup\n//             .reach(formSchema, e.target.name)\n//             .validate(e.target.value)\n//             .then(valid => {\n//                 setErrors({ ...errors, [e.target.name]: '' });\n//             })\n//             .catch(err => {\n//                 console.log('error', err);\n//                 setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//         });\n//     };\n\n//     useEffect(() => {\n//         formSchema.isValid(formState).then(valid => {\n//             console.log('valid?', valid);\n//             setIsButtonDisabled(!valid);\n//         });\n//     }, [formState]);\n\n//     const formSubmit = e => {\n//         e.preventDefault();\n\n//         axios\n//             .post('h', formState)\n//             .then(response => {\n//                 setPost(response.data);\n\n//                 setFormState({\n//                     username: '',\n//                     email: '',\n//                     password: '',\n//                     terms: ''\n//                 });\n\n//                 setServerError(null);\n//             })\n\n//             .catch(err => {\n//                 setServerError('Something isn\\'t working!');\n//             });\n//     };\n\n//     const inputChange = e => {\n//         e.persist();\n//         const newFormData = {\n//             ...formState,\n//             [e.target.name]:\n//                 e.target.type === 'checkbox'  ? e.target.checked : e.target.value\n//         };\n        \n//         validateChange(e);\n//         setFormState(newFormData)\n//     }\n\n//     return(\n//         <form onSubmit={formSubmit}>\n//             {serverError ? <p className='error'>{serverError}</p> : null}\n//             <label htmlFor='username'>\n//                 Username: \n//                 <input\n//                 id='username'\n//                 type='text'\n//                 name='username'\n//                 placeholder='Username'\n//                 onChange={inputChange}\n//                 value={formState.username} />\n//                 {errors.username.length > 0 ? <p className='error'>{errors.name}</p> : null}\n//             </label>\n//             <label htmlFor='email'>\n//                 Email: \n//                 <input\n//                 id='email'\n//                 type='text'\n//                 name='email'\n//                 placeholder='Email'\n//                 onChange={inputChange}\n//                 value={formState.email} />\n//                 {errors.email.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label htmlFor='password'>\n//                 Password: \n//                 <input\n//                 type='text'\n//                 name='password'\n//                 placeholder='Password'\n//                 onChange={inputChange}\n//                 value={formState.password} />\n//                 {errors.password.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label id='terms' htmlFor='terms'>\n//                 <input\n//                 type='checkbox' \n//                 name='terms'\n//                 checked={formState.terms}\n//                 onChange={inputChange} />\n//                 Terms of Service\n//             </label>\n//             <pre>{JSON.stringify(post, null, 2)}</pre>\n//             <button id='submit' type='submit' disabled={isButtonDisabled}>Submit</button>\n//         </form>\n//     );\n// };"]},"metadata":{},"sourceType":"module"}