{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Galvin/coding/unit-2/sprint-3/user-onboarding/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Form from './Components/Form';\nimport schema from './Validations/formSchema';\nimport axios from 'axios';\nimport * as Yup from 'yup';\nconst initialFormValues = {\n  ///// TEXT INPUTS /////\n  name: '',\n  email: '',\n  password: '',\n  ///// CHECKBOXES /////\n  termsOfService: false\n};\nconst initialFormErrors = {\n  name: '',\n  email: '',\n  password: '' // civil: '',\n\n};\nconst initialUsers = [];\nconst initialDisabled = true;\nexport default function App() {\n  _s();\n\n  const [users, setUsers] = useState(initialUsers); // array of friend objects\n\n  const [formValues, setFormValues] = useState(initialFormValues); // object\n\n  const [formErrors, setFormErrors] = useState(initialFormErrors); // object\n\n  const [disabled, setDisabled] = useState(initialDisabled);\n\n  const getUsers = () => {\n    // ðŸ”¥ STEP 5- IMPLEMENT! ON SUCCESS PUT FRIENDS IN STATE\n    //    helper to [GET] all friends from `http://buddies.com/api/friends`\n    axios.get(`https://reqres.in/api/users`).then(res => {\n      setUsers(res.data);\n    }).catch(err => {\n      debugger;\n    });\n  };\n\n  const postNewUser = newUser => {\n    // ðŸ”¥ STEP 6- IMPLEMENT! ON SUCCESS ADD NEWLY CREATED FRIEND TO STATE\n    //    helper to [POST] `newFriend` to `http://buddies.com/api/friends`\n    //    and regardless of success or failure, the form should reset\n    axios.post(`https://reqres.in/api/users`, newUser).then(res => {\n      setUsers([res.data, ...users]);\n      setFormValues(initialFormValues);\n    }).catch(err => {\n      debugger;\n    });\n  };\n\n  const inputChange = (name, value) => {\n    Yup.reach(schema, name) //get to this part of the schema\n    .validate(value) //validate this value\n    .then(() => {\n      //happy path and clear the error\n      setFormErrors({ ...formErrors,\n        [name]: ''\n      });\n    }).catch(err => {\n      setFormErrors({ ...formErrors,\n        [name]: err.errors[0]\n      });\n    });\n    setFormValues({ ...formValues,\n      [name]: value // NOT AN ARRAY\n\n    });\n  };\n\n  const formSubmit = () => {\n    const newUser = {\n      name: formValues.name.trim(),\n      email: formValues.email.trim(),\n      password: formValues.password.trim(),\n      termsOfService: formValues.termsOfService\n    };\n    postNewUser(newUser);\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n  useEffect(() => {\n    schema.isValid(formValues).then(valid => {\n      setDisabled(!valid);\n    });\n  }, [formValues]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" User Onboarding\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      values: formValues,\n      change: inputChange,\n      disabled: disabled,\n      submit: formSubmit,\n      errors: formErrors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rmlLuUcV0XigWmToQu/UVm4709Y=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Galvin/coding/unit-2/sprint-3/user-onboarding/src/App.js"],"names":["React","useState","useEffect","Form","schema","axios","Yup","initialFormValues","name","email","password","termsOfService","initialFormErrors","initialUsers","initialDisabled","App","users","setUsers","formValues","setFormValues","formErrors","setFormErrors","disabled","setDisabled","getUsers","get","then","res","data","catch","err","postNewUser","newUser","post","inputChange","value","reach","validate","errors","formSubmit","trim","isValid","valid"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport Form from './Components/Form'\nimport schema from './Validations/formSchema';\nimport axios from 'axios';\nimport * as Yup from 'yup';\n\nconst initialFormValues = {\n  ///// TEXT INPUTS /////\n  name: '',\n  email: '',\n  password: '',\n  ///// CHECKBOXES /////\n  termsOfService: false,\n}\nconst initialFormErrors = {\n  name: '',\n  email: '',\n  password: '',\n  // civil: '',\n}\nconst initialUsers = []\nconst initialDisabled = true\n\n\nexport default function App() {\n\n  const [users, setUsers] = useState(initialUsers)          // array of friend objects\n  const [formValues, setFormValues] = useState(initialFormValues) // object\n  const [formErrors, setFormErrors] = useState(initialFormErrors) // object\n  const [disabled, setDisabled] = useState(initialDisabled)   \n\n\n\n  const getUsers = () => {\n    // ðŸ”¥ STEP 5- IMPLEMENT! ON SUCCESS PUT FRIENDS IN STATE\n    //    helper to [GET] all friends from `http://buddies.com/api/friends`\n    axios\n    .get(`https://reqres.in/api/users`)\n    .then((res) => {\n      setUsers(res.data);\n    })\n    .catch((err) => {\n      debugger;\n    })\n  }\n\n  const postNewUser = newUser => {\n    // ðŸ”¥ STEP 6- IMPLEMENT! ON SUCCESS ADD NEWLY CREATED FRIEND TO STATE\n    //    helper to [POST] `newFriend` to `http://buddies.com/api/friends`\n    //    and regardless of success or failure, the form should reset\n    axios\n    .post(`https://reqres.in/api/users`, newUser)\n    .then((res) => {\n      setUsers([res.data, ...users]);\n      setFormValues(initialFormValues);\n    })\n    .catch((err) => {\n      debugger;\n    })\n  };\n\n\n\n\n\n  \n  const inputChange = (name, value) => {\n\n    Yup\n    .reach(schema, name) //get to this part of the schema\n    .validate(value) //validate this value\n    .then(() => {\n      //happy path and clear the error\n      setFormErrors({\n        ...formErrors,\n        [name]: '',\n      })\n    })\n    .catch((err) => {\n      setFormErrors({\n        ...formErrors,\n        [name]: err.errors[0],\n      })\n    })\n\n    setFormValues({\n      ...formValues,\n      [name]: value // NOT AN ARRAY\n    })\n  };\n\n\n\n  const formSubmit = () => {\n    const newUser = {\n      name: formValues.name.trim(),\n      email: formValues.email.trim(),\n      password: formValues.password.trim(),\n      termsOfService: formValues.termsOfService\n    }\n    postNewUser(newUser);\n  }\n\n  useEffect(() => {\n    getUsers()\n  }, [])\n\n  useEffect(() => {\n    schema.isValid(formValues).then(valid => {\n      setDisabled(!valid);\n    });\n  }, [formValues]);\n\n\n  return (\n    <div className=\"App\">\n      <h1> User Onboarding</h1>\n      <Form\n        values={formValues}\n        change={inputChange}\n        disabled={disabled}\n        submit={formSubmit}\n        errors={formErrors}\n      />\n    </div>\n  );\n}\n        \n"]},"metadata":{},"sourceType":"module"}