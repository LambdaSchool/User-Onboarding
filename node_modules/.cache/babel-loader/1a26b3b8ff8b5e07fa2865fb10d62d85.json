{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Galvin/coding/unit-2/sprint-3/user-onboarding/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Form from './Components/Form'; // import schema from '../validation/formSchema';\n\nimport axios from 'axios';\nimport * as Yup from 'yup';\nconst initialFormValues = {\n  ///// TEXT INPUTS /////\n  name: '',\n  email: '',\n  password: '',\n  ///// DROPDOWN /////\n  // role: '',\n  ///// RADIO BUTTONS /////\n  // civil: '',\n  ///// CHECKBOXES /////\n  termsOfService: false\n};\nconst initialFormErrors = {\n  name: '',\n  email: '',\n  password: '' // civil: '',\n\n};\nconst initialFriends = [];\nconst initialDisabled = true;\nexport default function App() {\n  _s();\n\n  const [friends, setFriends] = useState(initialFriends); // array of friend objects\n\n  const [formValues, setFormValues] = useState(initialFormValues); // object\n\n  const [formErrors, setFormErrors] = useState(initialFormErrors); // object\n\n  const [disabled, setDisabled] = useState(initialDisabled); // const inputChange = (name, value) => {\n  //   // Yup\n  //   // .reach(schema, name) //get to this part of the schema\n  //   // .validate(value) //validate this value\n  //   // .then(() => {\n  //   //   //happy path and clear the error\n  //   //   setFormErrors({\n  //   //     ...formErrors,\n  //   //     [name]: '',\n  //   //   })\n  //   // })\n  //   // .catch((err) => {\n  //   //   setFormErrors({\n  //   //     ...formErrors,\n  //   //     [name]: err.errors[0],\n  //   //   })\n  //   // })\n  //   setFormValues({\n  //     ...formValues,\n  //     [name]: value // NOT AN ARRAY\n  //   })\n  // };\n\n  const inputChange = (name, value) => {\n    setFormValues({ ...formValues,\n      [name]: value // NOT AN ARRAY\n\n    });\n  };\n\n  const formSubmit = () => {\n    const newUser = {\n      name: formValues.name.trim(),\n      email: formValues.email.trim(),\n      password: formValues.password.trim(),\n      termsOfService: formValues.termsOfService\n    }; // postNewUser(newUser);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" User Onboarding\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      values: formValues,\n      change: inputChange,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n} // change={inputChange}\n// submit={formSubmit}\n// errors={formErrors}\n\n_s(App, \"u7JrOD+R3pUSiOg5V80s91oJezk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Galvin/coding/unit-2/sprint-3/user-onboarding/src/App.js"],"names":["React","useState","useEffect","Form","axios","Yup","initialFormValues","name","email","password","termsOfService","initialFormErrors","initialFriends","initialDisabled","App","friends","setFriends","formValues","setFormValues","formErrors","setFormErrors","disabled","setDisabled","inputChange","value","formSubmit","newUser","trim"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,MAAMC,iBAAiB,GAAG;AACxB;AACAC,EAAAA,IAAI,EAAE,EAFkB;AAGxBC,EAAAA,KAAK,EAAE,EAHiB;AAIxBC,EAAAA,QAAQ,EAAE,EAJc;AAKxB;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,EAAE;AAVQ,CAA1B;AAYA,MAAMC,iBAAiB,GAAG;AACxBJ,EAAAA,IAAI,EAAE,EADkB;AAExBC,EAAAA,KAAK,EAAE,EAFiB;AAGxBC,EAAAA,QAAQ,EAAE,EAHc,CAIxB;;AAJwB,CAA1B;AAMA,MAAMG,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,IAAxB;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAACW,cAAD,CAAtC,CAF4B,CAEoC;;AAChE,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAACK,iBAAD,CAA5C,CAH4B,CAGoC;;AAChE,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAACU,iBAAD,CAA5C,CAJ4B,CAIoC;;AAChE,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAACY,eAAD,CAAxC,CAL4B,CAO5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAMU,WAAW,GAAG,CAAChB,IAAD,EAAOiB,KAAP,KAAiB;AAEnCN,IAAAA,aAAa,CAAC,EACR,GAAGD,UADK;AAER,OAACV,IAAD,GAAQiB,KAFA,CAEM;;AAFN,KAAD,CAAb;AAIG,GANL;;AASA,QAAMC,UAAU,GAAG,MAAM;AACvB,UAAMC,OAAO,GAAG;AACdnB,MAAAA,IAAI,EAAEU,UAAU,CAACV,IAAX,CAAgBoB,IAAhB,EADQ;AAEdnB,MAAAA,KAAK,EAAES,UAAU,CAACT,KAAX,CAAiBmB,IAAjB,EAFO;AAGdlB,MAAAA,QAAQ,EAAEQ,UAAU,CAACR,QAAX,CAAoBkB,IAApB,EAHI;AAIdjB,MAAAA,cAAc,EAAEO,UAAU,CAACP;AAJb,KAAhB,CADuB,CAOvB;AACD,GARD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AACE,MAAA,MAAM,EAAEO,UADV;AAEE,MAAA,MAAM,EAAEM,WAFV;AAGE,MAAA,QAAQ,EAAEF;AAHZ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,C,CAEO;AACA;AACR;;GApEwBP,G;;KAAAA,G","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport Form from './Components/Form'\n// import schema from '../validation/formSchema';\nimport axios from 'axios';\nimport * as Yup from 'yup';\n\nconst initialFormValues = {\n  ///// TEXT INPUTS /////\n  name: '',\n  email: '',\n  password: '',\n  ///// DROPDOWN /////\n  // role: '',\n  ///// RADIO BUTTONS /////\n  // civil: '',\n  ///// CHECKBOXES /////\n  termsOfService: false,\n}\nconst initialFormErrors = {\n  name: '',\n  email: '',\n  password: '',\n  // civil: '',\n}\nconst initialFriends = []\nconst initialDisabled = true\n\n\nexport default function App() {\n\n  const [friends, setFriends] = useState(initialFriends)          // array of friend objects\n  const [formValues, setFormValues] = useState(initialFormValues) // object\n  const [formErrors, setFormErrors] = useState(initialFormErrors) // object\n  const [disabled, setDisabled] = useState(initialDisabled)   \n  \n  // const inputChange = (name, value) => {\n\n  //   // Yup\n  //   // .reach(schema, name) //get to this part of the schema\n  //   // .validate(value) //validate this value\n  //   // .then(() => {\n  //   //   //happy path and clear the error\n  //   //   setFormErrors({\n  //   //     ...formErrors,\n  //   //     [name]: '',\n  //   //   })\n  //   // })\n  //   // .catch((err) => {\n  //   //   setFormErrors({\n  //   //     ...formErrors,\n  //   //     [name]: err.errors[0],\n  //   //   })\n  //   // })\n\n  //   setFormValues({\n  //     ...formValues,\n  //     [name]: value // NOT AN ARRAY\n  //   })\n  // };\n\n  const inputChange = (name, value) => {\n    \n    setFormValues({\n          ...formValues,\n          [name]: value // NOT AN ARRAY\n        })\n      };\n\n\n  const formSubmit = () => {\n    const newUser = {\n      name: formValues.name.trim(),\n      email: formValues.email.trim(),\n      password: formValues.password.trim(),\n      termsOfService: formValues.termsOfService\n    }\n    // postNewUser(newUser);\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1> User Onboarding</h1>\n      <Form\n        values={formValues}\n        change={inputChange}\n        disabled={disabled}\n      />\n    </div>\n  );\n}\n\n        // change={inputChange}\n        // submit={formSubmit}\n// errors={formErrors}"]},"metadata":{},"sourceType":"module"}