{"ast":null,"code":"var _jsxFileName = \"/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js\";\nimport React, { useState } from 'react';\nimport * as yup from 'yup';\nimport axios from 'axios';\nexport default function Form() {\n  const initialFormState = {\n    username: '',\n    email: '',\n    password: '',\n    terms: ''\n  };\n  const [post, setPost] = useState([]);\n  const [serverError, setServerError] = useState(\"\");\n  const [formState, setFormState] = useState(initialFormState);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [errors, setErrors] = useState(initialFormState);\n  const formSchema = yup.object().shape({\n    username: yup.string().required(\"You must choose a username!\"),\n    email: yup.string().email('Invalid email address').required,\n    password: yup.string().required(\"Invalid password\"),\n    terms: yup.boolean().oneOf([true], 'Agree or die')\n  });\n\n  const validateChange = e => {\n    yup.reach(formSchema, e.target.name).validate(e.target.value).then(valid => {\n      setErrors({ ...errors,\n        [e.target.name]: ''\n      });\n    }).catch(err => {\n      setErrors({ ...errors,\n        [e.target.name]: err.errors[0]\n      });\n    });\n  };\n\n  const formSubmit = e => {\n    e.preventDefault();\n    axios.post('h', formState).then(response => {\n      setPost(response.data);\n      setFormState({\n        username: '',\n        email: '',\n        password: '',\n        terms: ''\n      });\n      setServerError(null);\n    }).catch(err => {\n      setServerError('Something isn');\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Username:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"username\",\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Email:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Password:\", /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    id: \"terms\",\n    htmlFor: \"terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), \"Terms of Service\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"submit\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Submit\"));\n}\n;","map":{"version":3,"sources":["/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js"],"names":["React","useState","yup","axios","Form","initialFormState","username","email","password","terms","post","setPost","serverError","setServerError","formState","setFormState","isButtonDisabled","setIsButtonDisabled","errors","setErrors","formSchema","object","shape","string","required","boolean","oneOf","validateChange","e","reach","target","name","validate","value","then","valid","catch","err","formSubmit","preventDefault","response","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport axios from  'axios';\n\n\nexport default function Form() {\n\n    const initialFormState = {\n        username: '',\n        email: '',\n        password:  '',\n        terms: ''\n    };\n\n    const [post, setPost] = useState([]);\n    const [serverError, setServerError] = useState(\"\");\n    const [formState, setFormState] = useState(initialFormState);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n    const [errors, setErrors] = useState(initialFormState);\n\n    const formSchema = yup.object().shape({\n        username: yup.string().required(\"You must choose a username!\"),\n        email: yup.string().email('Invalid email address').required,\n        password: yup.string().required(\"Invalid password\"),\n        terms: yup.boolean().oneOf([true], 'Agree or die')\n    });\n\n    const validateChange = e => {\n        yup\n            .reach(formSchema, e.target.name)\n            .validate(e.target.value)\n            .then(valid => {\n                setErrors({ ...errors, [e.target.name]: '' });\n            })\n            .catch(err => {\n                setErrors({ ...errors, [e.target.name]: err.errors[0] });\n        });\n    };\n\n    const formSubmit = e => {\n        e.preventDefault();\n\n        axios\n            .post('h', formState)\n            .then(response => {\n                setPost(response.data);\n\n                setFormState({\n                    username: '',\n                    email: '',\n                    password: '',\n                    terms: ''\n                });\n\n                setServerError(null);\n            })\n\n            .catch(err => {\n                setServerError('Something isn')\n            })\n    }\n\n    return(\n        <form>\n            <label htmlFor='username'>\n                Username: \n                <input\n                id='username'\n                type='text'\n                name='username'\n                placeholder='Username' />\n            </label>\n            <label htmlFor='email'>\n                Email: \n                <input\n                id='email'\n                type='text'\n                name='email'\n                placeholder='Email' />\n            </label>\n            <label>\n                Password: \n                <input\n                placeholder='Password' />\n            </label>\n            <label id='terms' htmlFor='terms'>\n                <input\n                type='checkbox' \n                name='terms' />\n                Terms of Service\n            </label>\n            <button id='submit' type='submit'>Submit</button>\n        </form>\n    );\n};"]},"metadata":{},"sourceType":"module"}