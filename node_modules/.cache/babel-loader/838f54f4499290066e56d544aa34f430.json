{"ast":null,"code":"import _slicedToArray from \"/home/evz/Projects/User-Onboarding/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/evz/Projects/User-Onboarding/src/components/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withFormik, Form as FormikForm, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nconst UserForm = ({\n  values,\n  touched,\n  errors,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  useEffect(() => {\n    if (status) {\n      setUsers([...users, status]);\n    }\n  }, [status]);\n  return React.createElement(React.Fragment, null, React.createElement(FormikForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, errors.password), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"I have read and agree to the Terms of Service\", React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"tos\",\n    checked: values.tos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), touched.tos && errors.tos && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, errors.tos), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Submit!\")), users.map(user => React.createElement(User, {\n    user_name: user.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })));\n};\n\nconst FormikUserForm = withFormik({\n  mapPropsToValues({\n    name,\n    email,\n    password,\n    tos\n  }) {\n    return {\n      name: name || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      tos: tos || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Name is a required field\"),\n    email: Yup.string().email(\"Input a valid email\").required(\"Email is a required field\"),\n    password: Yup.string().min(8, \"Password must be at least 8 characters\").required(\"Password is a required field\"),\n    tos: Yup.boolean().oneOf([true], \"Must accept Terms of Service\")\n  }),\n\n  handleSubmit(values, {\n    setStatus\n  }) {\n    // console.log('Values in handleSubmit', values);\n    axios.post(\"https://reqres.in/api/users\", values).then(response => {\n      // console.log(\"RESPONSE\", response);\n      setStatus(response.data);\n    }).catch(error => {// console.log(\"ERROR\", error);\n    });\n  }\n\n})(UserForm);\nexport default FormikUserForm;","map":{"version":3,"sources":["/home/evz/Projects/User-Onboarding/src/components/Form.js"],"names":["React","useState","useEffect","withFormik","Form","FormikForm","Field","Yup","axios","UserForm","values","touched","errors","status","users","setUsers","name","email","password","tos","map","user","FormikUserForm","mapPropsToValues","validationSchema","object","shape","string","required","min","boolean","oneOf","handleSubmit","setStatus","post","then","response","data","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,IAAI,IAAIC,UAA7B,EAAyCC,KAAzC,QAAsD,QAAtD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA,MAAnB;AAA2BC,EAAAA;AAA3B,CAAD,KAAyC;AAAA,oBAC5BZ,QAAQ,CAAC,EAAD,CADoB;AAAA;AAAA,QAC/Ca,KAD+C;AAAA,QACxCC,QADwC;;AAGtDb,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGW,MAAH,EAAU;AACNE,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWD,MAAX,CAAD,CAAR;AACH;AACF,GAJQ,EAIP,CAACA,MAAD,CAJO,CAAT;AAMA,SACF,0CACU,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,WAAW,EAAC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGCF,OAAO,CAACK,IAAR,IAAgBJ,MAAM,CAACI,IAAvB,IAA+B;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBJ,MAAM,CAACI,IAA7B,CAHhC,EAKA,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,WAAW,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALA,EAMCL,OAAO,CAACM,KAAR,IAAiBL,MAAM,CAACK,KAAxB,IAAiC;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBL,MAAM,CAACK,KAA7B,CANlC,EAQA,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,WAAW,EAAC,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARA,EASCN,OAAO,CAACO,QAAR,IAAoBN,MAAM,CAACM,QAA3B,IACC;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBN,MAAM,CAACM,QAA7B,CAVF,EAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,KAA5B;AAAkC,IAAA,OAAO,EAAER,MAAM,CAACS,GAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAbA,EAiBCR,OAAO,CAACQ,GAAR,IAAeP,MAAM,CAACO,GAAtB,IAA6B;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBP,MAAM,CAACO,GAA7B,CAjB9B,EAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAnBA,CADV,EAsBSL,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAQ,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEA,IAAI,CAACL,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,CAtBT,CADE;AA2BD,CApCH;;AAsCE,MAAMM,cAAc,GAAGnB,UAAU,CAAC;AAChCoB,EAAAA,gBAAgB,CAAC;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA;AAAzB,GAAD,EAAiC;AAC/C,WAAO;AACLH,MAAAA,IAAI,EAAEA,IAAI,IAAI,EADT;AAELC,MAAAA,KAAK,EAAEA,KAAK,IAAI,EAFX;AAGLC,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,EAHjB;AAILC,MAAAA,GAAG,EAAEA,GAAG,IAAI;AAJP,KAAP;AAMD,GAR+B;;AAUhCK,EAAAA,gBAAgB,EAAEjB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmB;AACnCV,IAAAA,IAAI,EAAET,GAAG,CAACoB,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CAD6B;AAEnCX,IAAAA,KAAK,EAAEV,GAAG,CAACoB,MAAJ,GACJV,KADI,CACE,qBADF,EAEJW,QAFI,CAEK,2BAFL,CAF4B;AAKnCV,IAAAA,QAAQ,EAAEX,GAAG,CAACoB,MAAJ,GACPE,GADO,CACH,CADG,EACA,wCADA,EAEPD,QAFO,CAEE,8BAFF,CALyB;AAQnCT,IAAAA,GAAG,EAAEZ,GAAG,CAACuB,OAAJ,GAAcC,KAAd,CAAoB,CAAC,IAAD,CAApB,EAA4B,8BAA5B;AAR8B,GAAnB,CAVc;;AAqBhCC,EAAAA,YAAY,CAACtB,MAAD,EAAS;AAAEuB,IAAAA;AAAF,GAAT,EAAyB;AACnC;AACAzB,IAAAA,KAAK,CACF0B,IADH,CACQ,6BADR,EACuCxB,MADvC,EAEGyB,IAFH,CAEQC,QAAQ,IAAI;AAChB;AACAH,MAAAA,SAAS,CAACG,QAAQ,CAACC,IAAV,CAAT;AACD,KALH,EAMGC,KANH,CAMSC,KAAK,IAAI,CACd;AACD,KARH;AASD;;AAhC+B,CAAD,CAAV,CAiCpB9B,QAjCoB,CAAvB;AAmCF,eAAea,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withFormik, Form as FormikForm, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\n\nconst UserForm = ({ values, touched, errors, status }) => {\n    const [users, setUsers] = useState([]);\n  \n    useEffect(()=>{\n      if(status){\n          setUsers([...users, status])\n      }\n    },[status])\n  \n    return (\n  <>\n            <FormikForm>\n            {/* {console.log('USERS in RETURN', users)} */}\n            <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n            {touched.name && errors.name && <p className=\"error\">{errors.name}</p>}\n      \n            <Field type=\"text\" name=\"email\" placeholder=\"Email\" />\n            {touched.email && errors.email && <p className=\"error\">{errors.email}</p>}\n      \n            <Field type=\"password\" name=\"password\" placeholder=\"Password\" />\n            {touched.password && errors.password && (\n              <p className=\"error\">{errors.password}</p>\n            )}\n      \n            <label>\n              I have read and agree to the Terms of Service\n              <Field type=\"checkbox\" name=\"tos\" checked={values.tos} />\n            </label>\n            {touched.tos && errors.tos && <p className=\"error\">{errors.tos}</p>}\n      \n            <button>Submit!</button>\n          </FormikForm>\n          {users.map((user)=><User user_name={user.name}/>)}\n  \n  </>   \n    );\n  };\n  \n  const FormikUserForm = withFormik({\n    mapPropsToValues({ name, email, password, tos }) {\n      return {\n        name: name || \"\",\n        email: email || \"\",\n        password: password || \"\",\n        tos: tos || false\n      };\n    },\n  \n    validationSchema: Yup.object().shape({\n      name: Yup.string().required(\"Name is a required field\"),\n      email: Yup.string()\n        .email(\"Input a valid email\")\n        .required(\"Email is a required field\"),\n      password: Yup.string()\n        .min(8, \"Password must be at least 8 characters\")\n        .required(\"Password is a required field\"),\n      tos: Yup.boolean().oneOf([true], \"Must accept Terms of Service\")\n    }),\n  \n    handleSubmit(values, { setStatus } ) {\n      // console.log('Values in handleSubmit', values);\n      axios\n        .post(\"https://reqres.in/api/users\", values)\n        .then(response => {\n          // console.log(\"RESPONSE\", response);\n          setStatus(response.data)\n        })\n        .catch(error => {\n          // console.log(\"ERROR\", error);\n        });\n    }\n  })(UserForm);\n  \nexport default FormikUserForm;"]},"metadata":{},"sourceType":"module"}