{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Galvin/coding/unit-2/sprint-3/user-onboarding/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Form from './Components/Form';\nimport schema from './Validations/formSchema';\nimport axios from 'axios';\nimport * as Yup from 'yup';\nconst initialFormValues = {\n  ///// TEXT INPUTS /////\n  name: '',\n  email: '',\n  password: '',\n  ///// DROPDOWN /////\n  // role: '',\n  ///// RADIO BUTTONS /////\n  // civil: '',\n  ///// CHECKBOXES /////\n  termsOfService: false\n};\nconst initialFormErrors = {\n  name: '',\n  email: '',\n  password: '' // civil: '',\n\n};\nconst initialFriends = [];\nconst initialDisabled = true;\nexport default function App() {\n  _s();\n\n  const [friends, setFriends] = useState(initialFriends); // array of friend objects\n\n  const [formValues, setFormValues] = useState(initialFormValues); // object\n\n  const [formErrors, setFormErrors] = useState(initialFormErrors); // object\n\n  const [disabled, setDisabled] = useState(initialDisabled);\n\n  const inputChange = (name, value) => {\n    Yup.reach(schema, name) //get to this part of the schema\n    .validate(value) //validate this value\n    .then(() => {\n      //happy path and clear the error\n      setFormErrors({ ...formErrors,\n        [name]: ''\n      });\n    }).catch(err => {\n      setFormErrors({ ...formErrors,\n        [name]: err.errors[0]\n      });\n    });\n    setFormValues({ ...formValues,\n      [name]: value // NOT AN ARRAY\n\n    });\n  };\n\n  const formSubmit = () => {\n    const newUser = {\n      name: formValues.name.trim(),\n      email: formValues.email.trim(),\n      password: formValues.password.trim(),\n      termsOfService: formValues.termsOfService\n    }; // postNewUser(newUser);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" User Onboarding\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      values: formValues,\n      change: inputChange,\n      disabled: disabled,\n      submit: formSubmit,\n      errors: formErrors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"u7JrOD+R3pUSiOg5V80s91oJezk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Galvin/coding/unit-2/sprint-3/user-onboarding/src/App.js"],"names":["React","useState","useEffect","Form","schema","axios","Yup","initialFormValues","name","email","password","termsOfService","initialFormErrors","initialFriends","initialDisabled","App","friends","setFriends","formValues","setFormValues","formErrors","setFormErrors","disabled","setDisabled","inputChange","value","reach","validate","then","catch","err","errors","formSubmit","newUser","trim"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,MAAMC,iBAAiB,GAAG;AACxB;AACAC,EAAAA,IAAI,EAAE,EAFkB;AAGxBC,EAAAA,KAAK,EAAE,EAHiB;AAIxBC,EAAAA,QAAQ,EAAE,EAJc;AAKxB;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,EAAE;AAVQ,CAA1B;AAYA,MAAMC,iBAAiB,GAAG;AACxBJ,EAAAA,IAAI,EAAE,EADkB;AAExBC,EAAAA,KAAK,EAAE,EAFiB;AAGxBC,EAAAA,QAAQ,EAAE,EAHc,CAIxB;;AAJwB,CAA1B;AAMA,MAAMG,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,IAAxB;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAACY,cAAD,CAAtC,CAF4B,CAEoC;;AAChE,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAACM,iBAAD,CAA5C,CAH4B,CAGoC;;AAChE,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAACW,iBAAD,CAA5C,CAJ4B,CAIoC;;AAChE,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAACa,eAAD,CAAxC;;AAEA,QAAMU,WAAW,GAAG,CAAChB,IAAD,EAAOiB,KAAP,KAAiB;AAEnCnB,IAAAA,GAAG,CACFoB,KADD,CACOtB,MADP,EACeI,IADf,EACqB;AADrB,KAECmB,QAFD,CAEUF,KAFV,EAEiB;AAFjB,KAGCG,IAHD,CAGM,MAAM;AACV;AACAP,MAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZ,SAACZ,IAAD,GAAQ;AAFI,OAAD,CAAb;AAID,KATD,EAUCqB,KAVD,CAUQC,GAAD,IAAS;AACdT,MAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZ,SAACZ,IAAD,GAAQsB,GAAG,CAACC,MAAJ,CAAW,CAAX;AAFI,OAAD,CAAb;AAID,KAfD;AAiBAZ,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZ,OAACV,IAAD,GAAQiB,KAFI,CAEE;;AAFF,KAAD,CAAb;AAID,GAvBD;;AA2BA,QAAMO,UAAU,GAAG,MAAM;AACvB,UAAMC,OAAO,GAAG;AACdzB,MAAAA,IAAI,EAAEU,UAAU,CAACV,IAAX,CAAgB0B,IAAhB,EADQ;AAEdzB,MAAAA,KAAK,EAAES,UAAU,CAACT,KAAX,CAAiByB,IAAjB,EAFO;AAGdxB,MAAAA,QAAQ,EAAEQ,UAAU,CAACR,QAAX,CAAoBwB,IAApB,EAHI;AAIdvB,MAAAA,cAAc,EAAEO,UAAU,CAACP;AAJb,KAAhB,CADuB,CAOvB;AACD,GARD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AACE,MAAA,MAAM,EAAEO,UADV;AAEE,MAAA,MAAM,EAAEM,WAFV;AAGE,MAAA,QAAQ,EAAEF,QAHZ;AAIE,MAAA,MAAM,EAAEU,UAJV;AAKE,MAAA,MAAM,EAAEZ;AALV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA3DuBL,G;;KAAAA,G","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport Form from './Components/Form'\nimport schema from './Validations/formSchema';\nimport axios from 'axios';\nimport * as Yup from 'yup';\n\nconst initialFormValues = {\n  ///// TEXT INPUTS /////\n  name: '',\n  email: '',\n  password: '',\n  ///// DROPDOWN /////\n  // role: '',\n  ///// RADIO BUTTONS /////\n  // civil: '',\n  ///// CHECKBOXES /////\n  termsOfService: false,\n}\nconst initialFormErrors = {\n  name: '',\n  email: '',\n  password: '',\n  // civil: '',\n}\nconst initialFriends = []\nconst initialDisabled = true\n\n\nexport default function App() {\n\n  const [friends, setFriends] = useState(initialFriends)          // array of friend objects\n  const [formValues, setFormValues] = useState(initialFormValues) // object\n  const [formErrors, setFormErrors] = useState(initialFormErrors) // object\n  const [disabled, setDisabled] = useState(initialDisabled)   \n  \n  const inputChange = (name, value) => {\n\n    Yup\n    .reach(schema, name) //get to this part of the schema\n    .validate(value) //validate this value\n    .then(() => {\n      //happy path and clear the error\n      setFormErrors({\n        ...formErrors,\n        [name]: '',\n      })\n    })\n    .catch((err) => {\n      setFormErrors({\n        ...formErrors,\n        [name]: err.errors[0],\n      })\n    })\n\n    setFormValues({\n      ...formValues,\n      [name]: value // NOT AN ARRAY\n    })\n  };\n\n\n\n  const formSubmit = () => {\n    const newUser = {\n      name: formValues.name.trim(),\n      email: formValues.email.trim(),\n      password: formValues.password.trim(),\n      termsOfService: formValues.termsOfService\n    }\n    // postNewUser(newUser);\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1> User Onboarding</h1>\n      <Form\n        values={formValues}\n        change={inputChange}\n        disabled={disabled}\n        submit={formSubmit}\n        errors={formErrors}\n      />\n    </div>\n  );\n}\n        \n"]},"metadata":{},"sourceType":"module"}