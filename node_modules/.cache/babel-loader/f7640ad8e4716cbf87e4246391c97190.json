{"ast":null,"code":"var _jsxFileName = \"/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js\";\n// import React, { useState, useEffect } from \"react\";\n// import * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n// import axios from \"axios\";\n// export default function Form() {\n//   // can declare initialState once and use as initial state for form, for errors, and reset form\n//   const initialFormState = {\n//     name: \"\",\n//     email: \"\",\n//     motivation: \"\",\n//     positions: \"\",\n//     terms: \"\"\n//   };\n//   // temporary state used to set state\n//   const [post, setPost] = useState([]);\n//   // server error\n//   const [serverError, setServerError] = useState(\"\");\n//   // managing state for our form inputs\n//   const [formState, setFormState] = useState(initialFormState);\n//   // control whether or not the form can be submitted if there are errors in form validation\n//   const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n//   // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n//   const [errors, setErrors] = useState(initialFormState);\n//   // schema used for all validation to determine whether the input is valid or not\n//   const formSchema = yup.object().shape({\n//     name: yup.string().required(\"Name is a required field\"),\n//     email: yup\n//       .string()\n//       .email(\"must be a valid email address\")\n//       .required(),\n//     terms: yup.boolean().oneOf([true], \"please agree with us\"),\n//     positions: yup.string().required(\"Must choose a position\"),\n//     motivation: yup.string().required(\"must say why\")\n//   });\n//   // inline validation, validating one key/value pair\n//   const validateChange = e => {\n//     yup\n//       .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n//       .validate(e.target.value) // value in input\n//       .then(valid => {\n//         // if passing validation, clear any error\n//         setErrors({ ...errors, [e.target.name]: \"\" });\n//       })\n//       .catch(err => {\n//         // if failing validation, set error in state\n//         console.log(\"error!\", err);\n//         setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//       });\n//   };\n//   // whenever state updates, validate the entire form. if valid, then change button to be enabled.\n//   useEffect(() => {\n//     formSchema.isValid(formState).then(valid => {\n//       console.log(\"valid?\", valid);\n//       setIsButtonDisabled(!valid);\n//     });\n//   }, [formState]);\n//   // onSubmit function\n//   const formSubmit = e => {\n//     e.preventDefault();\n//     // send out POST request with obj as second param, for us that is formState.\n//     axios\n//       .post(\"https://reqres.in/api/users\", formState)\n//       .then(response => {\n//         // update temp state with value to display\n//         setPost(response.data);\n//         // clear state, could also use 'initialState' here\n//         setFormState({\n//           name: \"\",\n//           email: \"\",\n//           motivation: \"\",\n//           positions: \"\",\n//           terms: \"\"\n//         });\n//         // clear any server error\n//         setServerError(null);\n//       })\n//       .catch(err => {\n//         // this is where we could create a server error in the form!\n//         setServerError(\"oops! something happened!\");\n//       });\n//   };\n//   // onChange function\n//   const inputChange = e => {\n//     e.persist(); // necessary because we're passing the event asyncronously and we need it to exist even after this function completes (which will complete before validateChange finishes)\n//     const newFormData = {\n//       ...formState,\n//       [e.target.name]:\n//         e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n//     }; // remember value of the checkbox is in \"checked\" and all else is \"value\"\n//     validateChange(e); // for each change in input, do inline validation\n//     setFormState(newFormData); // update state with new data\n//   };\n//   return (\n//     <form onSubmit={formSubmit}>\n//       {serverError ? <p className=\"error\">{serverError}</p> : null}\n//       <label htmlFor=\"name\">\n//         Name\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           onChange={inputChange}\n//           value={formState.name}\n//         />\n//         {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n//       </label>\n//       <label htmlFor=\"email\">\n//         Email\n//         <input\n//           type=\"text\"\n//           name=\"email\"\n//           onChange={inputChange}\n//           value={formState.email}\n//         />\n//         {errors.email.length > 0 ? (\n//           <p className=\"error\">{errors.email}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"motivation\">\n//         Why would you like to volunteer?\n//         <textarea\n//           name=\"motivation\"\n//           onChange={inputChange}\n//           value={formState.motivation}\n//         />\n//         {errors.motivation.length > 0 ? (\n//           <p className=\"error\">{errors.motivation}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"positions\">\n//         What would you like to help with?\n//         <select id=\"positions\" name=\"positions\" onChange={inputChange}>\n//           <option value=\"\">--Please choose an option--</option>\n//           <option value=\"Newsletter\">Newsletter</option>\n//           <option value=\"Yard Work\">Yard Work</option>\n//           <option value=\"Admin Work\">Admin</option>\n//           <option value=\"Tabling\">Tabling</option>\n//         </select>\n//         {errors.positions.length > 0 ? (\n//           <p className=\"error\">{errors.positions}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"terms\" className=\"terms\">\n//         <input\n//           type=\"checkbox\"\n//           name=\"terms\"\n//           checked={formState.terms}\n//           onChange={inputChange}\n//         />\n//         Terms & Conditions\n//         {/* {errors.terms.length > 0 ? (\n//           <p className=\"error\">{errors.terms}</p>\n//         ) : null} */}\n//       </label>\n//       <pre>{JSON.stringify(post, null, 2)}</pre>\n//       <button disabled={isButtonDisabled} type=\"submit\">\n//         Submit\n//       </button>\n//     </form>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nimport * as yup from 'yup';\nimport axios from 'axios';\nexport default function Form() {\n  const initialFormState = {\n    username: '',\n    email: '',\n    password: '',\n    terms: ''\n  };\n  const [post, setPost] = useState([]);\n  const [serverError, setServerError] = useState(\"\");\n  const [formState, setFormState] = useState(initialFormState);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [errors, setErrors] = useState(initialFormState);\n  const formSchema = yup.object().shape({\n    username: yup.string().required(\"You must choose a username!\"),\n    email: yup.string().email('Invalid email address').required(),\n    password: yup.string().required(\"Invalid password\"),\n    terms: yup.boolean().oneOf([true], 'Agree or die')\n  });\n\n  const validateChange = e => {\n    yup.reach(formSchema, e.target.name).validate(e.target.value).then(valid => {\n      setErrors({ ...errors,\n        [e.target.name]: ''\n      });\n    }).catch(err => {\n      console.log('error', err);\n      setErrors({ ...errors,\n        [e.target.name]: err.errors[0]\n      });\n    });\n  };\n\n  useEffect(() => {\n    formSchema.isValid(formState).then(valid => {\n      console.log('valid?', valid);\n      setIsButtonDisabled(!valid);\n    });\n  }, [formState]);\n\n  const formSubmit = e => {\n    e.preventDefault();\n    axios.post('h', formState).then(response => {\n      setPost(response.data);\n      setFormState({\n        username: '',\n        email: '',\n        password: '',\n        terms: ''\n      });\n      setServerError(null);\n    }).catch(err => {\n      setServerError('Something isn\\'t working!');\n    });\n  };\n\n  const inputChange = e => {\n    e.persist();\n    const newFormData = { ...formState,\n      [e.target.name]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    };\n    validateChange(e);\n    setFormState(newFormData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, serverError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 28\n    }\n  }, serverError) : null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, \"Username:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"username\",\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"Username\",\n    onChange: inputChange,\n    value: formState.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }), errors.username.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 47\n    }\n  }, errors.name) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }, \"Email:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"Email\",\n    onChange: inputChange,\n    value: formState.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  }), errors.email.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 44\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, \"Password:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"password\",\n    placeholder: \"Password\",\n    onChange: inputChange,\n    value: formState.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  }), errors.password.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 47\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"label\", {\n    id: \"terms\",\n    htmlFor: \"terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"terms\",\n    checked: formState.terms,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 17\n    }\n  }), \"Terms of Service\"), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }\n  }, JSON.stringify(post, null, 2)), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"submit\",\n    type: \"submit\",\n    disabled: isButtonDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }, \"Submit\"));\n}\n;","map":{"version":3,"sources":["/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js"],"names":["React","useState","useEffect","yup","axios","Form","initialFormState","username","email","password","terms","post","setPost","serverError","setServerError","formState","setFormState","isButtonDisabled","setIsButtonDisabled","errors","setErrors","formSchema","object","shape","string","required","boolean","oneOf","validateChange","e","reach","target","name","validate","value","then","valid","catch","err","console","log","isValid","formSubmit","preventDefault","response","data","inputChange","persist","newFormData","type","checked","length","JSON","stringify"],"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n// import axios from \"axios\";\n\n// export default function Form() {\n//   // can declare initialState once and use as initial state for form, for errors, and reset form\n//   const initialFormState = {\n//     name: \"\",\n//     email: \"\",\n//     motivation: \"\",\n//     positions: \"\",\n//     terms: \"\"\n//   };\n\n//   // temporary state used to set state\n//   const [post, setPost] = useState([]);\n\n//   // server error\n//   const [serverError, setServerError] = useState(\"\");\n\n//   // managing state for our form inputs\n//   const [formState, setFormState] = useState(initialFormState);\n\n//   // control whether or not the form can be submitted if there are errors in form validation\n//   const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n//   // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n//   const [errors, setErrors] = useState(initialFormState);\n\n//   // schema used for all validation to determine whether the input is valid or not\n//   const formSchema = yup.object().shape({\n//     name: yup.string().required(\"Name is a required field\"),\n//     email: yup\n//       .string()\n//       .email(\"must be a valid email address\")\n//       .required(),\n//     terms: yup.boolean().oneOf([true], \"please agree with us\"),\n//     positions: yup.string().required(\"Must choose a position\"),\n//     motivation: yup.string().required(\"must say why\")\n//   });\n\n//   // inline validation, validating one key/value pair\n//   const validateChange = e => {\n//     yup\n//       .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n//       .validate(e.target.value) // value in input\n//       .then(valid => {\n//         // if passing validation, clear any error\n//         setErrors({ ...errors, [e.target.name]: \"\" });\n//       })\n//       .catch(err => {\n//         // if failing validation, set error in state\n//         console.log(\"error!\", err);\n//         setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//       });\n//   };\n\n//   // whenever state updates, validate the entire form. if valid, then change button to be enabled.\n//   useEffect(() => {\n//     formSchema.isValid(formState).then(valid => {\n//       console.log(\"valid?\", valid);\n//       setIsButtonDisabled(!valid);\n//     });\n//   }, [formState]);\n\n//   // onSubmit function\n//   const formSubmit = e => {\n//     e.preventDefault();\n\n//     // send out POST request with obj as second param, for us that is formState.\n//     axios\n//       .post(\"https://reqres.in/api/users\", formState)\n//       .then(response => {\n//         // update temp state with value to display\n//         setPost(response.data);\n\n//         // clear state, could also use 'initialState' here\n//         setFormState({\n//           name: \"\",\n//           email: \"\",\n//           motivation: \"\",\n//           positions: \"\",\n//           terms: \"\"\n//         });\n\n//         // clear any server error\n//         setServerError(null);\n//       })\n//       .catch(err => {\n//         // this is where we could create a server error in the form!\n//         setServerError(\"oops! something happened!\");\n//       });\n//   };\n\n//   // onChange function\n//   const inputChange = e => {\n//     e.persist(); // necessary because we're passing the event asyncronously and we need it to exist even after this function completes (which will complete before validateChange finishes)\n//     const newFormData = {\n//       ...formState,\n//       [e.target.name]:\n//         e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n//     }; // remember value of the checkbox is in \"checked\" and all else is \"value\"\n//     validateChange(e); // for each change in input, do inline validation\n//     setFormState(newFormData); // update state with new data\n//   };\n\n//   return (\n//     <form onSubmit={formSubmit}>\n//       {serverError ? <p className=\"error\">{serverError}</p> : null}\n//       <label htmlFor=\"name\">\n//         Name\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           onChange={inputChange}\n//           value={formState.name}\n//         />\n//         {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n//       </label>\n//       <label htmlFor=\"email\">\n//         Email\n//         <input\n//           type=\"text\"\n//           name=\"email\"\n//           onChange={inputChange}\n//           value={formState.email}\n//         />\n//         {errors.email.length > 0 ? (\n//           <p className=\"error\">{errors.email}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"motivation\">\n//         Why would you like to volunteer?\n//         <textarea\n//           name=\"motivation\"\n//           onChange={inputChange}\n//           value={formState.motivation}\n//         />\n//         {errors.motivation.length > 0 ? (\n//           <p className=\"error\">{errors.motivation}</p>\n//         ) : null}\n//       </label>\n\n//       <label htmlFor=\"positions\">\n//         What would you like to help with?\n//         <select id=\"positions\" name=\"positions\" onChange={inputChange}>\n//           <option value=\"\">--Please choose an option--</option>\n//           <option value=\"Newsletter\">Newsletter</option>\n//           <option value=\"Yard Work\">Yard Work</option>\n\n//           <option value=\"Admin Work\">Admin</option>\n\n//           <option value=\"Tabling\">Tabling</option>\n//         </select>\n//         {errors.positions.length > 0 ? (\n//           <p className=\"error\">{errors.positions}</p>\n//         ) : null}\n//       </label>\n\n//       <label htmlFor=\"terms\" className=\"terms\">\n//         <input\n//           type=\"checkbox\"\n//           name=\"terms\"\n//           checked={formState.terms}\n//           onChange={inputChange}\n//         />\n//         Terms & Conditions\n//         {/* {errors.terms.length > 0 ? (\n//           <p className=\"error\">{errors.terms}</p>\n//         ) : null} */}\n//       </label>\n//       <pre>{JSON.stringify(post, null, 2)}</pre>\n//       <button disabled={isButtonDisabled} type=\"submit\">\n//         Submit\n//       </button>\n//     </form>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from 'react';\nimport * as yup from 'yup';\nimport axios from  'axios';\n\n\nexport default function Form() {\n\n    const initialFormState = {\n        username: '',\n        email: '',\n        password:  '',\n        terms: ''\n    };\n\n    const [post, setPost] = useState([]);\n    const [serverError, setServerError] = useState(\"\");\n    const [formState, setFormState] = useState(initialFormState);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n    const [errors, setErrors] = useState(initialFormState);\n\n    const formSchema = yup.object().shape({\n        username: yup.string().required(\"You must choose a username!\"),\n        email: yup.string().email('Invalid email address').required(),\n        password: yup.string().required(\"Invalid password\"),\n        terms: yup.boolean().oneOf([true], 'Agree or die')\n    });\n\n    const validateChange = e => {\n        yup\n            .reach(formSchema, e.target.name)\n            .validate(e.target.value)\n            .then(valid => {\n                setErrors({ ...errors, [e.target.name]: '' });\n            })\n            .catch(err => {\n                console.log('error', err);\n                setErrors({ ...errors, [e.target.name]: err.errors[0] });\n        });\n    };\n\n    useEffect(() => {\n        formSchema.isValid(formState).then(valid => {\n            console.log('valid?', valid);\n            setIsButtonDisabled(!valid);\n        });\n    }, [formState]);\n\n    const formSubmit = e => {\n        e.preventDefault();\n\n        axios\n            .post('h', formState)\n            .then(response => {\n                setPost(response.data);\n\n                setFormState({\n                    username: '',\n                    email: '',\n                    password: '',\n                    terms: ''\n                });\n\n                setServerError(null);\n            })\n\n            .catch(err => {\n                setServerError('Something isn\\'t working!');\n            });\n    };\n\n    const inputChange = e => {\n        e.persist();\n        const newFormData = {\n            ...formState,\n            [e.target.name]:\n                e.target.type === 'checkbox'  ? e.target.checked : e.target.value\n        };\n        \n        validateChange(e);\n        setFormState(newFormData)\n    }\n\n    return(\n        <form onSubmit={formSubmit}>\n            {serverError ? <p className='error'>{serverError}</p> : null}\n            <label htmlFor='username'>\n                Username: \n                <input\n                id='username'\n                type='text'\n                name='username'\n                placeholder='Username'\n                onChange={inputChange}\n                value={formState.username} />\n                {errors.username.length > 0 ? <p className='error'>{errors.name}</p> : null}\n            </label>\n            <label htmlFor='email'>\n                Email: \n                <input\n                id='email'\n                type='text'\n                name='email'\n                placeholder='Email'\n                onChange={inputChange}\n                value={formState.email} />\n                {errors.email.length > 0 ? <p className='error'>{errors.email}</p> : null}\n            </label>\n            <label htmlFor='password'>\n                Password: \n                <input\n                type='text'\n                name='password'\n                placeholder='Password'\n                onChange={inputChange}\n                value={formState.password} />\n                {errors.password.length > 0 ? <p className='error'>{errors.email}</p> : null}\n            </label>\n            <label id='terms' htmlFor='terms'>\n                <input\n                type='checkbox' \n                name='terms'\n                checked={formState.terms}\n                onChange={inputChange} />\n                Terms of Service\n            </label>\n            <pre>{JSON.stringify(post, null, 2)}</pre>\n            <button id='submit' type='submit' disabled={isButtonDisabled}>Submit</button>\n        </form>\n    );\n};"]},"metadata":{},"sourceType":"module"}