{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n// import axios from \"axios\";\n// export default function Form() {\n//   // can declare initialState once and use as initial state for form, for errors, and reset form\n//   const initialFormState = {\n//     name: \"\",\n//     email: \"\",\n//     motivation: \"\",\n//     positions: \"\",\n//     terms: \"\"\n//   };\n//   // temporary state used to set state\n//   const [post, setPost] = useState([]);\n//   // server error\n//   const [serverError, setServerError] = useState(\"\");\n//   // managing state for our form inputs\n//   const [formState, setFormState] = useState(initialFormState);\n//   // control whether or not the form can be submitted if there are errors in form validation\n//   const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n//   // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n//   const [errors, setErrors] = useState(initialFormState);\n//   // schema used for all validation to determine whether the input is valid or not\n//   const formSchema = yup.object().shape({\n//     name: yup.string().required(\"Name is a required field\"),\n//     email: yup\n//       .string()\n//       .email(\"must be a valid email address\")\n//       .required(),\n//     terms: yup.boolean().oneOf([true], \"please agree with us\"),\n//     positions: yup.string().required(\"Must choose a position\"),\n//     motivation: yup.string().required(\"must say why\")\n//   });\n//   // inline validation, validating one key/value pair\n//   const validateChange = e => {\n//     yup\n//       .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n//       .validate(e.target.value) // value in input\n//       .then(valid => {\n//         // if passing validation, clear any error\n//         setErrors({ ...errors, [e.target.name]: \"\" });\n//       })\n//       .catch(err => {\n//         // if failing validation, set error in state\n//         console.log(\"error!\", err);\n//         setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//       });\n//   };\n//   // whenever state updates, validate the entire form. if valid, then change button to be enabled.\n//   useEffect(() => {\n//     formSchema.isValid(formState).then(valid => {\n//       console.log(\"valid?\", valid);\n//       setIsButtonDisabled(!valid);\n//     });\n//   }, [formState]);\n//   // onSubmit function\n//   const formSubmit = e => {\n//     e.preventDefault();\n//     // send out POST request with obj as second param, for us that is formState.\n//     axios\n//       .post(\"https://reqres.in/api/users\", formState)\n//       .then(response => {\n//         // update temp state with value to display\n//         setPost(response.data);\n//         // clear state, could also use 'initialState' here\n//         setFormState({\n//           name: \"\",\n//           email: \"\",\n//           motivation: \"\",\n//           positions: \"\",\n//           terms: \"\"\n//         });\n//         // clear any server error\n//         setServerError(null);\n//       })\n//       .catch(err => {\n//         // this is where we could create a server error in the form!\n//         setServerError(\"oops! something happened!\");\n//       });\n//   };\n//   // onChange function\n//   const inputChange = e => {\n//     e.persist(); // necessary because we're passing the event asyncronously and we need it to exist even after this function completes (which will complete before validateChange finishes)\n//     const newFormData = {\n//       ...formState,\n//       [e.target.name]:\n//         e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n//     }; // remember value of the checkbox is in \"checked\" and all else is \"value\"\n//     validateChange(e); // for each change in input, do inline validation\n//     setFormState(newFormData); // update state with new data\n//   };\n//   return (\n//     <form onSubmit={formSubmit}>\n//       {serverError ? <p className=\"error\">{serverError}</p> : null}\n//       <label htmlFor=\"name\">\n//         Name\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           onChange={inputChange}\n//           value={formState.name}\n//         />\n//         {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n//       </label>\n//       <label htmlFor=\"email\">\n//         Email\n//         <input\n//           type=\"text\"\n//           name=\"email\"\n//           onChange={inputChange}\n//           value={formState.email}\n//         />\n//         {errors.email.length > 0 ? (\n//           <p className=\"error\">{errors.email}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"motivation\">\n//         Why would you like to volunteer?\n//         <textarea\n//           name=\"motivation\"\n//           onChange={inputChange}\n//           value={formState.motivation}\n//         />\n//         {errors.motivation.length > 0 ? (\n//           <p className=\"error\">{errors.motivation}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"positions\">\n//         What would you like to help with?\n//         <select id=\"positions\" name=\"positions\" onChange={inputChange}>\n//           <option value=\"\">--Please choose an option--</option>\n//           <option value=\"Newsletter\">Newsletter</option>\n//           <option value=\"Yard Work\">Yard Work</option>\n//           <option value=\"Admin Work\">Admin</option>\n//           <option value=\"Tabling\">Tabling</option>\n//         </select>\n//         {errors.positions.length > 0 ? (\n//           <p className=\"error\">{errors.positions}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"terms\" className=\"terms\">\n//         <input\n//           type=\"checkbox\"\n//           name=\"terms\"\n//           checked={formState.terms}\n//           onChange={inputChange}\n//         />\n//         Terms & Conditions\n//         {/* {errors.terms.length > 0 ? (\n//           <p className=\"error\">{errors.terms}</p>\n//         ) : null} */}\n//       </label>\n//       <pre>{JSON.stringify(post, null, 2)}</pre>\n//       <button disabled={isButtonDisabled} type=\"submit\">\n//         Submit\n//       </button>\n//     </form>\n//   );\n// }\n// import React, { useState, useEffect } from 'react';\n// import * as yup from 'yup';\n// import axios from  'axios';\n// export default function Form() {\n//     const initialFormState = {\n//         username: '',\n//         email: '',\n//         password:  '',\n//         terms: ''\n//     };\n//     const [post, setPost] = useState([]);\n//     const [serverError, setServerError] = useState(\"\");\n//     const [formState, setFormState] = useState(initialFormState);\n//     const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n//     const [errors, setErrors] = useState(initialFormState);\n//     const formSchema = yup.object().shape({\n//         username: yup.string().required(\"You must choose a username!\"),\n//         email: yup.string().email('Invalid email address').required(),\n//         password: yup.string().required(\"Invalid password\"),\n//         terms: yup.boolean().oneOf([true], 'Agree or die')\n//     });\n//     const validateChange = e => {\n//         yup\n//             .reach(formSchema, e.target.name)\n//             .validate(e.target.value)\n//             .then(valid => {\n//                 setErrors({ ...errors, [e.target.name]: '' });\n//             })\n//             .catch(err => {\n//                 console.log('error', err);\n//                 setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//         });\n//     };\n//     useEffect(() => {\n//         formSchema.isValid(formState).then(valid => {\n//             console.log('valid?', valid);\n//             setIsButtonDisabled(!valid);\n//         });\n//     }, [formState]);\n//     const formSubmit = e => {\n//         e.preventDefault();\n//         axios\n//             .post('h', formState)\n//             .then(response => {\n//                 setPost(response.data);\n//                 setFormState({\n//                     username: '',\n//                     email: '',\n//                     password: '',\n//                     terms: ''\n//                 });\n//                 setServerError(null);\n//             })\n//             .catch(err => {\n//                 setServerError('Something isn\\'t working!');\n//             });\n//     };\n//     const inputChange = e => {\n//         e.persist();\n//         const newFormData = {\n//             ...formState,\n//             [e.target.name]:\n//                 e.target.type === 'checkbox'  ? e.target.checked : e.target.value\n//         };\n//         validateChange(e);\n//         setFormState(newFormData)\n//     }\n//     return(\n//         <form onSubmit={formSubmit}>\n//             {serverError ? <p className='error'>{serverError}</p> : null}\n//             <label htmlFor='username'>\n//                 Username: \n//                 <input\n//                 id='username'\n//                 type='text'\n//                 name='username'\n//                 placeholder='Username'\n//                 onChange={inputChange}\n//                 value={formState.username} />\n//                 {errors.username.length > 0 ? <p className='error'>{errors.name}</p> : null}\n//             </label>\n//             <label htmlFor='email'>\n//                 Email: \n//                 <input\n//                 id='email'\n//                 type='text'\n//                 name='email'\n//                 placeholder='Email'\n//                 onChange={inputChange}\n//                 value={formState.email} />\n//                 {errors.email.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label htmlFor='password'>\n//                 Password: \n//                 <input\n//                 type='text'\n//                 name='password'\n//                 placeholder='Password'\n//                 onChange={inputChange}\n//                 value={formState.password} />\n//                 {errors.password.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label id='terms' htmlFor='terms'>\n//                 <input\n//                 type='checkbox' \n//                 name='terms'\n//                 checked={formState.terms}\n//                 onChange={inputChange} />\n//                 Terms of Service\n//             </label>\n//             <pre>{JSON.stringify(post, null, 2)}</pre>\n//             <button id='submit' type='submit' disabled={isButtonDisabled}>Submit</button>\n//         </form>\n//     );\n// };","map":{"version":3,"sources":["/Users/samhall/Library/Mobile Documents/com~apple~CloudDocs/All Things Lambda/Lambda Projects/adv-forms/src/components/Form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import * as yup from \"yup\"; // DOCS: https://github.com/jquense/yup\n// import axios from \"axios\";\n\n// export default function Form() {\n//   // can declare initialState once and use as initial state for form, for errors, and reset form\n//   const initialFormState = {\n//     name: \"\",\n//     email: \"\",\n//     motivation: \"\",\n//     positions: \"\",\n//     terms: \"\"\n//   };\n\n//   // temporary state used to set state\n//   const [post, setPost] = useState([]);\n\n//   // server error\n//   const [serverError, setServerError] = useState(\"\");\n\n//   // managing state for our form inputs\n//   const [formState, setFormState] = useState(initialFormState);\n\n//   // control whether or not the form can be submitted if there are errors in form validation\n//   const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n//   // managing state for errors. empty unless inline validation (validateInput) updates key/value pair to have error\n//   const [errors, setErrors] = useState(initialFormState);\n\n//   // schema used for all validation to determine whether the input is valid or not\n//   const formSchema = yup.object().shape({\n//     name: yup.string().required(\"Name is a required field\"),\n//     email: yup\n//       .string()\n//       .email(\"must be a valid email address\")\n//       .required(),\n//     terms: yup.boolean().oneOf([true], \"please agree with us\"),\n//     positions: yup.string().required(\"Must choose a position\"),\n//     motivation: yup.string().required(\"must say why\")\n//   });\n\n//   // inline validation, validating one key/value pair\n//   const validateChange = e => {\n//     yup\n//       .reach(formSchema, e.target.name) // get the value out of schema at key \"e.target.name\" --> \"name=\"\n//       .validate(e.target.value) // value in input\n//       .then(valid => {\n//         // if passing validation, clear any error\n//         setErrors({ ...errors, [e.target.name]: \"\" });\n//       })\n//       .catch(err => {\n//         // if failing validation, set error in state\n//         console.log(\"error!\", err);\n//         setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//       });\n//   };\n\n//   // whenever state updates, validate the entire form. if valid, then change button to be enabled.\n//   useEffect(() => {\n//     formSchema.isValid(formState).then(valid => {\n//       console.log(\"valid?\", valid);\n//       setIsButtonDisabled(!valid);\n//     });\n//   }, [formState]);\n\n//   // onSubmit function\n//   const formSubmit = e => {\n//     e.preventDefault();\n\n//     // send out POST request with obj as second param, for us that is formState.\n//     axios\n//       .post(\"https://reqres.in/api/users\", formState)\n//       .then(response => {\n//         // update temp state with value to display\n//         setPost(response.data);\n\n//         // clear state, could also use 'initialState' here\n//         setFormState({\n//           name: \"\",\n//           email: \"\",\n//           motivation: \"\",\n//           positions: \"\",\n//           terms: \"\"\n//         });\n\n//         // clear any server error\n//         setServerError(null);\n//       })\n//       .catch(err => {\n//         // this is where we could create a server error in the form!\n//         setServerError(\"oops! something happened!\");\n//       });\n//   };\n\n//   // onChange function\n//   const inputChange = e => {\n//     e.persist(); // necessary because we're passing the event asyncronously and we need it to exist even after this function completes (which will complete before validateChange finishes)\n//     const newFormData = {\n//       ...formState,\n//       [e.target.name]:\n//         e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n//     }; // remember value of the checkbox is in \"checked\" and all else is \"value\"\n//     validateChange(e); // for each change in input, do inline validation\n//     setFormState(newFormData); // update state with new data\n//   };\n\n//   return (\n//     <form onSubmit={formSubmit}>\n//       {serverError ? <p className=\"error\">{serverError}</p> : null}\n//       <label htmlFor=\"name\">\n//         Name\n//         <input\n//           id=\"name\"\n//           type=\"text\"\n//           name=\"name\"\n//           onChange={inputChange}\n//           value={formState.name}\n//         />\n//         {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n//       </label>\n//       <label htmlFor=\"email\">\n//         Email\n//         <input\n//           type=\"text\"\n//           name=\"email\"\n//           onChange={inputChange}\n//           value={formState.email}\n//         />\n//         {errors.email.length > 0 ? (\n//           <p className=\"error\">{errors.email}</p>\n//         ) : null}\n//       </label>\n//       <label htmlFor=\"motivation\">\n//         Why would you like to volunteer?\n//         <textarea\n//           name=\"motivation\"\n//           onChange={inputChange}\n//           value={formState.motivation}\n//         />\n//         {errors.motivation.length > 0 ? (\n//           <p className=\"error\">{errors.motivation}</p>\n//         ) : null}\n//       </label>\n\n//       <label htmlFor=\"positions\">\n//         What would you like to help with?\n//         <select id=\"positions\" name=\"positions\" onChange={inputChange}>\n//           <option value=\"\">--Please choose an option--</option>\n//           <option value=\"Newsletter\">Newsletter</option>\n//           <option value=\"Yard Work\">Yard Work</option>\n\n//           <option value=\"Admin Work\">Admin</option>\n\n//           <option value=\"Tabling\">Tabling</option>\n//         </select>\n//         {errors.positions.length > 0 ? (\n//           <p className=\"error\">{errors.positions}</p>\n//         ) : null}\n//       </label>\n\n//       <label htmlFor=\"terms\" className=\"terms\">\n//         <input\n//           type=\"checkbox\"\n//           name=\"terms\"\n//           checked={formState.terms}\n//           onChange={inputChange}\n//         />\n//         Terms & Conditions\n//         {/* {errors.terms.length > 0 ? (\n//           <p className=\"error\">{errors.terms}</p>\n//         ) : null} */}\n//       </label>\n//       <pre>{JSON.stringify(post, null, 2)}</pre>\n//       <button disabled={isButtonDisabled} type=\"submit\">\n//         Submit\n//       </button>\n//     </form>\n//   );\n// }\n\n\n// import React, { useState, useEffect } from 'react';\n// import * as yup from 'yup';\n// import axios from  'axios';\n\n\n// export default function Form() {\n\n//     const initialFormState = {\n//         username: '',\n//         email: '',\n//         password:  '',\n//         terms: ''\n//     };\n\n//     const [post, setPost] = useState([]);\n//     const [serverError, setServerError] = useState(\"\");\n//     const [formState, setFormState] = useState(initialFormState);\n//     const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n//     const [errors, setErrors] = useState(initialFormState);\n\n//     const formSchema = yup.object().shape({\n//         username: yup.string().required(\"You must choose a username!\"),\n//         email: yup.string().email('Invalid email address').required(),\n//         password: yup.string().required(\"Invalid password\"),\n//         terms: yup.boolean().oneOf([true], 'Agree or die')\n//     });\n\n//     const validateChange = e => {\n//         yup\n//             .reach(formSchema, e.target.name)\n//             .validate(e.target.value)\n//             .then(valid => {\n//                 setErrors({ ...errors, [e.target.name]: '' });\n//             })\n//             .catch(err => {\n//                 console.log('error', err);\n//                 setErrors({ ...errors, [e.target.name]: err.errors[0] });\n//         });\n//     };\n\n//     useEffect(() => {\n//         formSchema.isValid(formState).then(valid => {\n//             console.log('valid?', valid);\n//             setIsButtonDisabled(!valid);\n//         });\n//     }, [formState]);\n\n//     const formSubmit = e => {\n//         e.preventDefault();\n\n//         axios\n//             .post('h', formState)\n//             .then(response => {\n//                 setPost(response.data);\n\n//                 setFormState({\n//                     username: '',\n//                     email: '',\n//                     password: '',\n//                     terms: ''\n//                 });\n\n//                 setServerError(null);\n//             })\n\n//             .catch(err => {\n//                 setServerError('Something isn\\'t working!');\n//             });\n//     };\n\n//     const inputChange = e => {\n//         e.persist();\n//         const newFormData = {\n//             ...formState,\n//             [e.target.name]:\n//                 e.target.type === 'checkbox'  ? e.target.checked : e.target.value\n//         };\n        \n//         validateChange(e);\n//         setFormState(newFormData)\n//     }\n\n//     return(\n//         <form onSubmit={formSubmit}>\n//             {serverError ? <p className='error'>{serverError}</p> : null}\n//             <label htmlFor='username'>\n//                 Username: \n//                 <input\n//                 id='username'\n//                 type='text'\n//                 name='username'\n//                 placeholder='Username'\n//                 onChange={inputChange}\n//                 value={formState.username} />\n//                 {errors.username.length > 0 ? <p className='error'>{errors.name}</p> : null}\n//             </label>\n//             <label htmlFor='email'>\n//                 Email: \n//                 <input\n//                 id='email'\n//                 type='text'\n//                 name='email'\n//                 placeholder='Email'\n//                 onChange={inputChange}\n//                 value={formState.email} />\n//                 {errors.email.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label htmlFor='password'>\n//                 Password: \n//                 <input\n//                 type='text'\n//                 name='password'\n//                 placeholder='Password'\n//                 onChange={inputChange}\n//                 value={formState.password} />\n//                 {errors.password.length > 0 ? <p className='error'>{errors.email}</p> : null}\n//             </label>\n//             <label id='terms' htmlFor='terms'>\n//                 <input\n//                 type='checkbox' \n//                 name='terms'\n//                 checked={formState.terms}\n//                 onChange={inputChange} />\n//                 Terms of Service\n//             </label>\n//             <pre>{JSON.stringify(post, null, 2)}</pre>\n//             <button id='submit' type='submit' disabled={isButtonDisabled}>Submit</button>\n//         </form>\n//     );\n// };"]},"metadata":{},"sourceType":"module"}